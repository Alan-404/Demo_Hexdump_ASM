%macro writeStr 2
	push	eax
	push	ebx
	push	ecx
	push	edx
	mov		edx,%2
	mov		ecx,%1
	mov		ebx,1
	mov		eax,4
	int		0x80
	pop		edx
	pop		ecx
	pop		ebx
	pop		eax
%endmacro
section .data
	hexchar	db '0123456789ABCDEF'
	bMem times 8 db 0x30	;Memory to store string
	cMem	db 0
	rowAddress dd 4
	temp db
	temp_pow db 2
	flag db 8
	arrAddress db "0x00000000"
	addAddress equ $-addAddress
	count dd 9

	global space
	global newline
	global write_char
	global write_str
	global write_hex_digit
	global write_hex
	global write_bin
	global write_dec
	global write_hec_dWord
section .text


space:
	push eax
	mov al,0x20
	call write_char
	pop eax
	ret
newline:
	push eax
	mov al,10
	call write_char
	pop eax
	ret
write_char:
	; input al
	mov byte[cMem],al
	writeStr cMem,1
;	mov byte[cMem],al
;	push cMem
;	push 1
;	call write_str
;	add  esp,8
	ret
write_str:
	; strAddr [ebp+12]
	; strLen [ebp+8]
	push ebp
	mov  ebp,esp
	writeStr [ebp+12],[ebp+8]
	leave
	ret 
write_hex_digit:
	; input al
	push ebx
	mov  ebx,hexchar	
	xlat
	call write_char
	pop  ebx
	ret
write_hex:
	; input al
	push ebx
	mov  bl,al 
	shr  al,4
	call write_hex_digit
	mov  al,bl
	and  al,0x0f
	call write_hex_digit
	pop  ebx
; --
;   push ebx
;	xor ah,ah
;	mov bl,16
;	div bl
;	call write_hex_digit
;	mov al,ah
;	call write_hex_digit
;	pop ebx
	ret	
write_bin:
	; input al
	push	ebx
	push	ecx
	push	edx
	push	esi
	push	edi

	push	eax

	;---reset bMem to '00000000'
	mov		al,0x30
	mov		ecx,8
	mov		edi,bMem
	cld
	rep		stosb
	;---
	pop		eax
_st_writebin:
	mov		ecx,7
	mov		esi,bMem
	mov		bl,128
_bin_disp_loop:
	mov		dl,al
	test	dl,bl
	jz		dl_zero
	inc		byte[esi]
dl_zero:
	inc		esi
	shr		bl,1
	loop	_bin_disp_loop

	writeStr  bMem,8

	pop		edi
	pop		esi
	pop		edx
	pop		ecx
	pop		ebx
	ret
	ret
write_dec:
	; input ax
	;input  ax
	push	ebx
	push	ecx
	push	edx

	xor		bx,bx
	mov		ecx,10
_div_loop:
	xor		dx,dx
	div		cx
	push	edx
	inc		bx
	cmp		ax,0
	jnz    _div_loop
_div_loop_fin:
	mov		cx,bx
_print_loop:
	pop		eax
	add		al,0x30
	call	write_char
	loop	_print_loop

	pop		edx
	pop		ecx
	pop		ebx
	ret
	ret

write_hex_digit_dWord:
	;input
	push ebx
	mov ebx, hexchar
	xlat
	pop ebx
	ret

write_hex_reverse_0:
	;input al
	push ebx
	mov bl, al
	shl al, 4
	call write_hex_digit_dWord
	mov byte[arrAddress + esi]
	dec esi
	mov al, bl
	shr al,4
	call write_hex_digit_dWord
	mov Byte[arrAddress + esi], al
	dec esi
	pop ebx
	ret

write_hex_reverse_1:
	;input al
	push ebx
	mov bl, al
	and al, 0x0f
	call write_hex_digit_dWord
	mov  Byte[arrAddress + esi], al
	dec esi
	mov al, bl
	shr al, 4
	call write_hex_digit_dWord
	mov Byte[arrAddress + esi], al
	dec esi
	pop ebx
	ret


write_hex_dWord:
	;input al
	xor eax, eax
	xor esi, esi
	xor edi, edi
	mov ebx, edx
	mov byte[flag], 0
	mov dword[count], 9
	_loop1:
		shr ebx, 1
		jc flag_bit_1
		_point:
		inc esi
		cmp esi, 8
		jne _loop1
		_loop2:
			mov esi, dWord[count]
			cmp byte[flag], 0
			je flag_reverse_0
			call write_hex_reverse_1
			_point2:
			shr edx, 8
			xor eax, eax
			mov ebx, edx
			mov dWord[count], esi
			xor esi , esi
			inc edi
			cmp edi, 4
			jae _loop1
			writeStr arrAddress, lenArrAddress
			ret

flag_reverse_0:
	call write_hex_reverse_0
	inc byte[flag]
	jmp _point2

flag_pow_zero:
	add al, 1
	jmp _point

flag_bit_1:
	; input al
	cmp esi, 0
	je flag_pow_zero
	mov byte[temp], al
	mov al, 1
	xor ecx, ecx
	pow:
		nul byte[temp_pow]
		inc ecx
		cmp ecx, esi
		jne pow
		add al, Byte[temp]
		jmp _point
